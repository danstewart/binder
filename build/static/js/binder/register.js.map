{"version":3,"sources":["../../../../src/static/js/binder/register.js"],"sourcesContent":["import { pascalToKebab } from \"./util.js\";\n\n/**\n * Register a controller (or multiple controllers)\n *\n * Example\n * ```js\n * registerControllers(MyController, MyOtherController);\n * ```\n *\n * With custom configuration:\n * ```js\n * registerControllers(\n *  MyController,\n *  [ MyOtherController, { name: \"my-custom-controller\" } ],\n *  [ MyOtherOtherController ],\n * )\n * ```\n * @param  {...any} controllers\n */\nconst registerControllers = async (...controllers) => {\n    // First find all undefined elements and assume they are custom elements\n    // We can then add the `data-controller` attribute to them\n    // This makes it easy for us to find which controller a given DOM element belongs to\n    // We also set the `data-controller` attr during the `connectedCallback` so any elements defined later will still work\n    const allUndefinedElements = [...document.querySelectorAll(\":not(:defined)\")];\n    allUndefinedElements.forEach(el => el.setAttribute(\"data-controller\", el.localName));\n\n    const registerController = async (controller, _options = {}) => {\n        let config = {};\n        if (Array.isArray(controller)) {\n            [controller, config = {}] = controller;\n        }\n\n        const controllerName = controller.name;\n        const controllerTag = config && config.name ? config.name : pascalToKebab(controllerName);\n\n        if (window.customElements.get(controllerTag)) {\n            console.warn(`Controller \"${controllerTag}\" is already registered, skipping...`);\n            return;\n        }\n\n        // All custom elements required a hyphenated tag name\n        if (!controllerTag.includes(\"-\")) {\n            console.error(`[${controllerName}] Controller tag name must contain a hyphen but got <${controllerTag}>`);\n        }\n\n        // Create an anonymous class here to avoid name clashes when using the bare controller with a custom name\n        window.customElements.define(controllerTag, class extends controller {}, {});\n    };\n\n    // Register our controllers in parallel\n    await Promise.allSettled(controllers.map(controller => registerController(controller)));\n};\n\nexport { registerControllers };\n"],"names":["pascalToKebab","registerControllers","controllers","allUndefinedElements","document","querySelectorAll","forEach","el","setAttribute","localName","registerController","controller","_options","config","Array","isArray","controllerName","name","controllerTag","window","customElements","get","console","warn","includes","error","define","Promise","allSettled","map"],"mappings":"4jBAAA,OAASA,aAAa,KAAQ,WAAY,CAoB1C,MAAMC,wCAAsB,oBAAA,UAAO,GAAGC,aAKlC,MAAMC,qBAAuB,IAAIC,SAASC,gBAAgB,CAAC,kBAAkB,CAC7EF,qBAAqBG,OAAO,CAACC,IAAMA,GAAGC,YAAY,CAAC,kBAAmBD,GAAGE,SAAS,GAElF,MAAMC,uCAAqB,oBAAA,UAAOC,WAAYC,SAAW,CAAC,CAAC,EACvD,IAAIC,OAAS,CAAC,EACd,GAAIC,MAAMC,OAAO,CAACJ,YAAa,CAC3B,CAACA,WAAYE,OAAS,CAAC,CAAC,CAAC,CAAGF,UAChC,CAEA,MAAMK,eAAiBL,WAAWM,IAAI,CACtC,MAAMC,cAAgBL,QAAUA,OAAOI,IAAI,CAAGJ,OAAOI,IAAI,CAAGjB,cAAcgB,gBAE1E,GAAIG,OAAOC,cAAc,CAACC,GAAG,CAACH,eAAgB,CAC1CI,QAAQC,IAAI,CAAC,CAAC,YAAY,EAAEL,cAAc,oCAAoC,CAAC,EAC/E,MACJ,CAGA,GAAI,CAACA,cAAcM,QAAQ,CAAC,KAAM,CAC9BF,QAAQG,KAAK,CAAC,CAAC,CAAC,EAAET,eAAe,qDAAqD,EAAEE,cAAc,CAAC,CAAC,CAC5G,CAGAC,OAAOC,cAAc,CAACM,MAAM,CAACR,cAAe,cAAcP,WAAY,EAAG,CAAC,EAC9E,mBArBMD,mBAA4BC,iDAwBlC,OAAMgB,QAAQC,UAAU,CAAC1B,YAAY2B,GAAG,CAAClB,YAAcD,mBAAmBC,aAC9E,mBAjCMV,2DAmCN,QAASA,mBAAmB,CAAG"}